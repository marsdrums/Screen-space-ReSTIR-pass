<jittershader name="default">
	<description>Default Slab </description>
	<param name="velTex" type="int" default="0" />
	<param name="prevVelTex" type="int" default="1" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<language name="glsl" version="1.5">
		<bind param="velTex" program="fp" />
		<bind param="prevVelTex" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="texDim" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	vec2 uv;
} jit_out;
uniform mat4 MVP;
uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform sampler2DRect velTex, prevVelTex;
uniform vec2 texDim;

void main(void) {

	vec2 vel = texelFetch(velTex, ivec2(jit_in.uv)).xy;
	vec2 prevVel = texture(prevVelTex, jit_in.uv - vel*texDim).xy;
	float weight = clamp( ( length(vel - prevVel) - 0.001 )*100, 0.0, 1.0 );
	
	outColor = vec4(vel, weight, 1.0);
}
]]>
</program>
	</language>
</jittershader>
