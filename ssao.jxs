<jittershader name="ssao.jxs">
	<param name="tex_normals" type="int" default="0" />
	<param name="depthLayersTex" type="int" default="1" />
	<param name="viewPosTex" type="int" default="2" />
	<param name="tex_rand" type="int" default="3" />
	<texture file="stbn_unit3_scalar_tiled.png" type="float16" unit="3" rectangle="1" filter="none none" wrap="repeat repeat"/>	
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="intensity" type="float" default="1.0" />
	<param name="amnt" type="float" default="1.0" />
	<param name="radius" type="float" default="1" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="frame" type="int" state="FRAME" />
	<param name="uv" type="vec2" state="TEXCOORD" />

	<language name="glsl" version="1.5">
		<bind param="MVP" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="position" program="vp" />	
		<bind param="tex_normals" program="fp" />	
		<bind param="depthLayersTex" program="fp" />	
		<bind param="viewPosTex" program="fp" />
		<bind param="tex_rand" program="fp" />		
		<bind param="projmat" program="fp" />		
		<bind param="intensity" program="fp" />		
		<bind param="amnt" program="fp" />				
		<bind param="radius" program="fp" />	
		<bind param="frame" program="fp" />		
		<bind param="uv" program="vp" />	
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 position;
in vec2 uv;

uniform mat4 MVP;
uniform mat4 textureMatrix0;

out jit_PerVertex {
	smooth vec2 texcoord_rect;
} jit_out;

void main()
{
	gl_Position = MVP*vec4(position, 1.);
	jit_out.texcoord_rect = vec2(textureMatrix0*vec4(uv, 0., 1.));
}

]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	smooth vec2 texcoord_rect;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform sampler2DRect tex_normals, depthLayersTex, viewPosTex, tex_rand;
uniform mat4 projmat, textureMatrix0;
uniform float intensity, amnt, radius;
uniform int frame;

void main()
{
	
	vec4 norm_depth = texelFetch(tex_normals, ivec2(jit_in.texcoord_rect));
	vec3 viewPos = texelFetch(viewPosTex, ivec2(jit_in.texcoord_rect)).xyz; //normalize(ray) * farDistance * depth;
	vec3 viewNorm = norm_depth.xyz;
	float depth = norm_depth.w;
	//outTest = -vec4(viewPos.z, viewPos.z, viewPos.z, 1);
//	float a = 1./(1. + viewNorm.z);
//    float b = -viewNorm.x*viewNorm.y*a;
//    vec3 f = vec3(1. - viewNorm.x*viewNorm.x*a, b, -viewNorm.x);
//   	vec3 r = vec3(b, 1. - viewNorm.y*viewNorm.y*a , -viewNorm.y);
//
//   	mat3 TBN = mat3(r, f, viewNorm);

  //vec3 right = normalize(cross(viewNorm, vec3(0,1,0)));
  //vec3 front = normalize(cross(right, viewNorm));
  //mat3 TBN = mat3(right, front, viewNorm);

	
	// accumulated occlusion factor
	#define NUM_BASE_SAMPLES 8	
	float occ = 0;
	float weight = amnt / NUM_BASE_SAMPLES;
	for (int i = 0; i < NUM_BASE_SAMPLES; ++i) {

		float tile_select = float(mod(i + frame*NUM_BASE_SAMPLES, 63)) + 1;
		vec2 tile_uv = 128*vec2(mod(tile_select, 8), floor(tile_select/8));
		vec4 rand = texelFetch(tex_rand, ivec2(mod(jit_in.texcoord_rect, vec2(128)) + tile_uv));
		rand.xyz = rand.xyz*2 - 1;
		//rand.xyz = normalize(viewNorm*0.1 + rand.xyz);
		//if(rand.z < 0) rand.xyz *= -1;
		//rand.xyz = TBN * rand.xyz;
		rand.xyz = normalize(rand.xyz + viewNorm);

		float sample_radius = rand.w * radius;
		vec3 randPos = viewPos + rand.xyz * sample_radius;
		vec4 nuv = projmat * vec4(randPos, 1);
		nuv.xy /= nuv.w;
		if(nuv.x <= -1 || nuv.y <= -1 || nuv.x >= 1 || nuv.y >= 1){
			//occ += 0;
			//bent_nor += rand.xyz;
			continue;
		}

		vec2 nuv_rect = vec2(textureMatrix0 * vec4((nuv.xy*0.5 + 0.5), 0,1));

		vec4 sample_depth = texelFetch(depthLayersTex, ivec2(nuv_rect));
    if ( 	(sample_depth.r > randPos.z && randPos.z > sample_depth.g) || 
    			(sample_depth.b > randPos.z && randPos.z > sample_depth.a) ){
				occ += weight;
				//bent_nor += rand.xyz;
		} 
	}

	occ = 1 - clamp(occ, 0.0, 1.0);
	//bent_nor = normalize(bent_nor);
	
	outColor = vec4(occ);
}

]]>		
		</program>		
	</language>	
</jittershader>
