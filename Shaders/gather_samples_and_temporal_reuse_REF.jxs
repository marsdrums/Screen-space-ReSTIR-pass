<jittershader name="default">
	<description>Default Slab </description>
	<param name="colTex" type="int" default="0" filter="nearest" />
	<param name="norDepthTex" type="int" default="1" filter="nearest" />
	<param name="velTex" type="int" default="2" filter="nearest" />
	<param name="posTex" type="int" default="3" filter="nearest" />
	<param name="prev_reservoirTex" type="int" default="4" filter="nearest" />
	<param name="prev_best_wposTex" type="int" default="5" filter="nearest" />
	<param name="albTex" type="int" default="6" filter="nearest" />
	<param name="environmentMap" type="int" default="7" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="mapSize" type="vec2" state="TEXDIM7" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="farClip" type="float" state="FAR_CLIP" />

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="V" type="mat4" state="VIEW_MATRIX" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" transform="INVERSE" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<param name="farCorner" type="vec3" state="FAR_CORNER" />
	<param name="nearClip" type="float" state="NEAR_CLIP" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<language name="glsl" version="1.5">
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="mapSize" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="prev_reservoirTex" program="fp" />
		<bind param="prev_best_wposTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="environmentMap" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="farClip" program="fp" />
		<bind param="farClip" program="vp" />

		<bind param="MVP" program="vp" />
		<bind param="MVP" program="fp" />
		<bind param="MV" program="fp" />
		<bind param="invV" program="fp" />
		<bind param="V" program="fp" />
		<bind param="VP" program="fp" />
		<bind param="projmat" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="farCorner" program="vp" />
		<bind param="nearClip" program="vp" />
		<bind param="eye" program="fp" />

		<include source="noise_functions.glsl" program="fp" />
		<include source="ReSTIR_structures_temporal.glsl" program="fp" />
		<include source="ReSTIR_common_REF.glsl" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
	flat vec4 plane_near;
	flat vec4 plane_far;
	flat vec4 plane_left;
	flat vec4 plane_right;
	flat vec4 plane_top;
	flat vec4 plane_bottom;
} jit_out;

uniform mat4 MVP;
uniform mat4 textureMatrix0;
uniform vec3 farCorner;
uniform float nearClip, farClip;

vec4 computePlane(vec3 p1, vec3 p2, vec3 p3) {
    vec3 normal = normalize(cross(p2 - p1, p3 - p1));
    float D = -dot(normal, p1);
    return vec4(normal, D);
}

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.dir = farCorner * vec3(gl_Position.xy, 1);
	jit_out.uv = vec2(textureMatrix0*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));

   // Compute frustum dimensions
    float far_height 	= 2.0 * abs(farCorner.y);
    float far_width 	= 2.0 * abs(farCorner.x);

    float near_height 	= (nearClip / farClip) * far_height;
    float near_width 	= (nearClip / farClip) * far_width;

    // Compute frustum corners in view space
    vec3 near_center 	= vec3(0.0, 0.0, -nearClip);
    vec3 far_center 	= vec3(0.0, 0.0, -farClip);

    vec3 far_top_right 		= farCorner;
    vec3 far_top_left 		= vec3(-farCorner.x, farCorner.y, farCorner.z);
    vec3 far_bottom_right 	= vec3(farCorner.x, -farCorner.y, farCorner.z);
    vec3 far_bottom_left 	= vec3(-farCorner.x, -farCorner.y, farCorner.z);

    vec3 near_top_right 	= vec3(near_width / 2.0, near_height / 2.0, -nearClip);
    vec3 near_top_left 		= vec3(-near_width / 2.0, near_height / 2.0, -nearClip);
    vec3 near_bottom_right 	= vec3(near_width / 2.0, -near_height / 2.0, -nearClip);
    vec3 near_bottom_left 	= vec3(-near_width / 2.0, -near_height / 2.0, -nearClip);

    // Define frustum planes
    jit_out.plane_near 		= computePlane(near_top_left, near_top_right, near_bottom_right); // Near plane
    jit_out.plane_far 		= computePlane(far_top_right, far_top_left, far_bottom_left); // Far plane
    jit_out.plane_left 		= computePlane(near_top_left, far_top_left, far_bottom_left); // Left plane
    jit_out.plane_right 	= computePlane(far_top_right, near_top_right, near_bottom_right); // Right plane
    jit_out.plane_top 		= computePlane(near_top_left, near_top_right, far_top_right); // Top plane
    jit_out.plane_bottom 	= computePlane(near_bottom_right, near_bottom_left, far_bottom_left); // Bottom plane

}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outReservoir;
layout (location = 1) out vec4 outPhat;
layout (location = 2) out vec4 outTest;


uint get_rng_seed(){
	return uint(jit_in.uv.x*371783) + uint(jit_in.uv.y*288472) + uint(frame*377112);
}

vec4 gather_samples(in sample this_s, inout uint seed, out float p_hat){

    vec4 reservoir = vec4(0); //curr reservoir

	int M = 2; //num of from the view port
	int J = 2; //num of samples from the environment map

	int sample_index;
	vec2 sample_uv;

	if(background(this_s)) return vec4(0.0);

	//initial selection of 1 sample of M
	for (int i = 0; i < M; i++)
	{
		sample_uv = get_sample_uv(this_s, seed);

		if(sample_uv.x == -10000) continue; //the random ray generator failed

		if(sample_uv.x > 0 && sample_uv.y > 0){
		    sample_index = int(uv2index(sample_uv));
		    sample test_s = get_sample_pos_col(sample_index);
			p_hat = length( get_specular_radiance(this_s, test_s) );
			p_hat *= get_pdf(this_s, test_s);	

		} else {
			sample_uv *= -1;
	    	sample_index = int(uv2index_for_env(sample_uv));
	    	sample test_s = get_sample_dir_col_for_env_jittered(sample_index, seed);
			p_hat = length( get_radiance_for_env(this_s, test_s) );		
		}

		reservoir = updateReservoir(reservoir, float(sample_index), p_hat, 1, seed);
	}

	if(reservoir.y >= 0){ //if it's a sample from the viewport

		sample test_s = get_sample(int(reservoir.y));
		p_hat = length( get_specular_radiance(this_s, test_s) );
		p_hat *= get_pdf(this_s, test_s);

	} else { //if it's a sample from the environment map

		sample test_s = get_sample_dir_col_for_env_jittered(int(reservoir.y), seed);
		p_hat = length( get_radiance_for_env(this_s, test_s) );
	}

	reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
	return reservoir;
}

bool valid_reprojection(in sample this_s, in vec2 uv){

	//simplify this!!
	if(!valid_uv(uv)) return false;
	return true;
}


void main(void) {

	uint seed = get_rng_seed();
	sample this_s = get_sample(uv2index(jit_in.uv));
	if(this_s.depth == 1){
		outReservoir = vec4(0.0);
		outPhat = vec4(0.0);
		return;
	}

	sample test_s;

	float p_hat;
	vec4 reservoir = gather_samples(this_s, seed, p_hat);

/*
	//TEMPORAL REUSE//____________________________________________________________

	ivec2 reprojected_uv = ivec2(this_s.uv);//ivec2(this_s.uv - this_s.vel*texDim );

	if(valid_reprojection(this_s, vec2(reprojected_uv))){

		vec4 prev_reservoir = texelFetch(prev_reservoirTex, reprojected_uv);
		vec4 temporal_reservoir = vec4(0);

		// combine current reservoir
		temporal_reservoir = updateReservoir(temporal_reservoir, reservoir.y, p_hat * reservoir.w * reservoir.z, reservoir.z, seed);
		
		// combine previous reservoir
		if(prev_reservoir.y >= 0){

			vec4 lookup_prev_pos_id = texelFetch(prev_best_wposTex, reprojected_uv);
			vec4 prev_best_wpos = projmat * vec4( (V * vec4(lookup_prev_pos_id.xyz, 1)).xyz, 1);
			prev_best_wpos.xy /= prev_best_wpos.w;
			prev_best_wpos.xy = prev_best_wpos.xy * 0.5 + 0.5;
			vec2 prev_best_wpos_uv = floor((textureMatrix0 * vec4(prev_best_wpos.xy,1,1)).xy) + 0.5;// * texDim;

			if(valid_uv(prev_best_wpos_uv)){

				prev_reservoir.y = float(uv2index(prev_best_wpos_uv));
				test_s = get_sample(int(prev_reservoir.y));
				p_hat = 0;
				
				if(!background(test_s)){
					p_hat = length( get_specular_radiance(this_s, test_s) );
					p_hat *= get_pdf(this_s, test_s);

					//vec2 prev_vel = texture(velTex, vec2(reprojected_uv)).ba;
					//float vel_diff = length(this_s.vel - prev_vel);
					//float weight = clamp( 1 - (vel_diff - 0.001)*1000, 0.0, 1.0 );

					prev_reservoir.z =  min(4, prev_reservoir.z);
					temporal_reservoir = updateReservoir(temporal_reservoir, prev_reservoir.y, p_hat * prev_reservoir.w * prev_reservoir.z, prev_reservoir.z, seed);

				}
			}

		} else {

			vec2 prev_best_wpos_uv = texelFetch(prev_best_wposTex, reprojected_uv).xy;

			prev_reservoir.y = float(uv2index_for_env(prev_best_wpos_uv));
			test_s = get_sample_dir_col_for_env_jittered(int(prev_reservoir.y), seed);

			p_hat = length( get_radiance_for_env(this_s, test_s) );
			p_hat *= get_pdf(this_s, test_s);

			//vec2 prev_vel = texture(velTex, vec2(reprojected_uv)).ba;
			//float vel_diff = length(this_s.vel - prev_vel);
			//float weight = clamp( 1 - (vel_diff - 0.001)*1000, 0.0, 1.0 );

			prev_reservoir.z = min(4, prev_reservoir.z);
			temporal_reservoir = updateReservoir(temporal_reservoir, prev_reservoir.y, p_hat * prev_reservoir.w * prev_reservoir.z, prev_reservoir.z, seed);	

		}

		temporal_reservoir.z = reservoir.z + prev_reservoir.z;
		
		if(temporal_reservoir.y >= 0){
			test_s = get_sample(int(temporal_reservoir.y));
			p_hat = luminance( get_specular_radiance(this_s, test_s) );			
		} else {
			test_s = get_sample_dir_col_for_env_jittered(int(temporal_reservoir.y), seed);
			p_hat = luminance( get_radiance_for_env(this_s, test_s) );
				
		}
		
		temporal_reservoir.w = (1 / max(p_hat, 0.0001)) * (temporal_reservoir.x / max(temporal_reservoir.z, 0.0001));		
		reservoir = temporal_reservoir;	
		
	}

	//___________________________________________________________________________________________________________________________________________________________
*/

	if(reservoir.y >= 0){ //if the sample is from the viewport

		test_s = get_sample(int(reservoir.y));

		if(!visible(this_s, test_s, seed)){
			reservoir.w = 0.0;
		} else {
			float p_hat = length(get_specular_radiance(this_s, test_s));
			p_hat *= get_pdf(this_s, test_s);
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		}

	} else { //if the sample is from the environment map

		test_s = get_sample_dir_col_for_env_jittered(int(reservoir.y), seed);

		if(!visible_env(this_s, test_s, seed)){
			reservoir.w = 0.0;
		} else {
			p_hat = length( get_radiance_for_env(this_s, test_s) );
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		}
	}

	outReservoir = reservoir;
	outPhat = vec4(p_hat, 0,0,1);

}
]]>
</program>
</language>
</jittershader>
