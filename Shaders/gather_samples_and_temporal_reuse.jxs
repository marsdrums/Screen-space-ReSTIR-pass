<jittershader name="default">
	<description>Default Slab </description>
	<param name="colTex" type="int" default="0" filter="nearest" /> //w is free
	<param name="norDepthTex" type="int" default="1" filter="nearest" />
	<param name="depthLayersTex" type="int" default="2" filter="nearest" /> //z and w are free
	<param name="posTex" type="int" default="3" filter="nearest" />
	<param name="prev_reservoirTex" type="int" default="4" filter="nearest" />
	<param name="prev_best_wposTex" type="int" default="5" filter="nearest" /> //w is free
	<param name="albTex" type="int" default="6" filter="nearest" />
	<param name="environmentMap" type="int" default="7" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="mapSize" type="vec2" state="TEXDIM7" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="farClip" type="float" state="FAR_CLIP" />
	<param name="nearClip" type="float" state="NEAR_CLIP" />

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="V" type="mat4" state="VIEW_MATRIX" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" transform="INVERSE" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<param name="farCorner" type="vec3" state="FAR_CORNER" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<language name="glsl" version="1.5">
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="depthLayersTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="mapSize" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="prev_reservoirTex" program="fp" />
		<bind param="prev_best_wposTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="environmentMap" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="farClip" program="fp" />
		<bind param="farClip" program="vp" />
		<bind param="nearClip" program="vp" />

		<bind param="MVP" program="vp" />
		<bind param="MVP" program="fp" />
		<bind param="MV" program="fp" />
		<bind param="invV" program="fp" />
		<bind param="V" program="fp" />
		<bind param="VP" program="fp" />
		<bind param="projmat" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="farCorner" program="vp" />
		<bind param="eye" program="fp" />

		<include source="noise_functions.glsl" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
	flat vec4 plane_near;
	flat vec4 plane_far;
	flat vec4 plane_left;
	flat vec4 plane_right;
	flat vec4 plane_top;
	flat vec4 plane_bottom;
} jit_out;

uniform mat4 MVP;
uniform mat4 textureMatrix0;
uniform vec3 farCorner;
uniform float nearClip, farClip;


vec4 computePlane(vec3 p1, vec3 p2, vec3 p3) {
    vec3 normal = normalize(cross(p2 - p1, p3 - p1));
    float D = -dot(normal, p1);
    return vec4(normal, D);
}

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.dir = farCorner * vec3(gl_Position.xy, 1);
	jit_out.uv = vec2(textureMatrix0*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));

   // Compute frustum dimensions
    float far_height 	= 2.0 * abs(farCorner.y);
    float far_width 	= 2.0 * abs(farCorner.x);

    float near_height 	= (nearClip / farClip) * far_height;
    float near_width 	= (nearClip / farClip) * far_width;

    // Compute frustum corners in view space
    vec3 near_center 	= vec3(0.0, 0.0, -nearClip);
    vec3 far_center 	= vec3(0.0, 0.0, -farClip);

    vec3 far_top_right 		= farCorner;
    vec3 far_top_left 		= vec3(-farCorner.x, farCorner.y, farCorner.z);
    vec3 far_bottom_right 	= vec3(farCorner.x, -farCorner.y, farCorner.z);
    vec3 far_bottom_left 	= vec3(-farCorner.x, -farCorner.y, farCorner.z);

    vec3 near_top_right 	= vec3(near_width / 2.0, near_height / 2.0, -nearClip);
    vec3 near_top_left 		= vec3(-near_width / 2.0, near_height / 2.0, -nearClip);
    vec3 near_bottom_right 	= vec3(near_width / 2.0, -near_height / 2.0, -nearClip);
    vec3 near_bottom_left 	= vec3(-near_width / 2.0, -near_height / 2.0, -nearClip);

    // Define frustum planes
    jit_out.plane_near 		= computePlane(near_top_left, near_top_right, near_bottom_right); // Near plane
    jit_out.plane_far 		= computePlane(far_top_right, far_top_left, far_bottom_left); // Far plane
    jit_out.plane_left 		= computePlane(near_top_left, far_top_left, far_bottom_left); // Left plane
    jit_out.plane_right 	= computePlane(far_top_right, near_top_right, near_bottom_right); // Right plane
    jit_out.plane_top 		= computePlane(near_top_left, near_top_right, far_top_right); // Top plane
    jit_out.plane_bottom 	= computePlane(near_bottom_right, near_bottom_left, far_bottom_left); // Bottom plane

}
]]>
</program>
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define search_radius 100
#define M_PI 3.141592653589793238462643383279502884

in jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
	flat vec4 plane_near;
	flat vec4 plane_far;
	flat vec4 plane_left;
	flat vec4 plane_right;
	flat vec4 plane_top;
	flat vec4 plane_bottom;

} jit_in;

layout (location = 0) out vec4 outReservoir;
layout (location = 1) out vec4 outPhat;
layout (location = 2) out vec4 outTest;

uniform sampler2DRect colTex, norDepthTex, depthLayersTex, posTex, prev_reservoirTex, prev_best_wposTex, albTex, environmentMap;
uniform int frame;
uniform vec2 texDim, mapSize;
uniform mat4 prevMVP, invV, MV, MVP, VP, V, projmat, textureMatrix0;
uniform float farClip;
uniform vec3 eye;

struct sample{
	vec3 col;
	vec3 nor;
	vec3 pos;
	float depth;
	float index;
	vec2 uv;
	vec2 vel;
	vec3 alb;
	float id;
};

uint get_rng_seed(){
	return uint(jit_in.uv.x*371783) + uint(jit_in.uv.y*288472) + uint(frame*377112);
}

vec2 get_sample_uv(inout uint seed){

	//float angle = RandomFloat01(seed)*TWOPI;
	//float ra = sqrt(RandomFloat01(seed))*radius;
	//return vec2(cos(angle), sin(angle))*ra + jit_in.uv;
	return vec2(RandomFloat01(seed), RandomFloat01(seed))*texDim;

}

vec2 cartesianToUv(vec3 cartesian) {
    float theta = atan(cartesian.y, cartesian.x)/TWOPI; // azimuthal angle
    float phi = acos(cartesian.z)/M_PI; // polar angle
    return vec2(theta, phi);
}

vec2 get_sample_uv_for_env(inout uint seed, in vec3 nor){

	vec3 wNor = (invV * vec4(nor, 0)).xyz;
	//vec3 rand_dir = randomUnitVector3(seed);
	//rand_dir *= dot(rand_dir, wNor) > 0.0 ? 1 : -1;
	vec3 rand_dir = normalize(wNor +  randomUnitVector3(seed));
	vec2 uv = vec2(atan(rand_dir.z, rand_dir.x), asin(rand_dir.y));
    uv *= vec2(-1/(2*M_PI), 1/M_PI); //to invert atan
    uv += 0.5;
    uv *= mapSize;
    return uv;
	//return vec2(RandomFloat01(seed), RandomFloat01(seed))*mapSize;
	//vec3 wNor = (invV * vec4(nor,0)).xyz;
	//vec2 center = cartesianToUv(wNor) + 2;
	//vec2 randOffset = 0.5*(vec2(RandomFloat01(seed)-0.5, RandomFloat01(seed))-0.5);
	//return vec2(RandomFloat01(seed), RandomFloat01(seed))*mapSize;//mod(center + randOffset, vec2(1.0))*mapSize;
}

bool valid_uv(in vec2 uv){
	return uv.x >= 0 && uv.y >= 0 && uv.x < texDim.x && uv.y < texDim.y;
}

int uv2index(in vec2 uv){
	uv = floor(uv);
	return int(uv.x + uv.y*texDim.x);
}

int uv2index_for_env(in vec2 uv){
	//uv -= 0.5;
	uv = floor(uv);
	return -int(uv.x + uv.y*mapSize.x); //negate the index to distinguish it from viewport samples
}

vec2 index2uv(in int i){
	return vec2( mod( float(i), texDim.x ), floor( float(i) / texDim.x ) )+0.5;
}

vec2 index2uv_for_env(in int i){
	return vec2( mod( float(-i), mapSize.x ), floor( float(-i) / mapSize.x ) )+0.5;
}

float luminance(vec3 x){
	return dot(x, vec3(0.299, 0.587, 0.114));
}

vec3 uv2dir(in vec2 uv){

	uv /= mapSize;

    // Convert the normalized UV coordinates to the range [-1, 1]
    float u = uv.x * 2.0 - 1.0;
    float v = uv.y * 2.0 - 1.0;

    // Calculate the longitude and latitude angles
    float longitude = u * M_PI;          // Longitude (-π to π)
    float latitude = v * M_PI * 0.5;     // Latitude (-π/2 to π/2)

    // Convert spherical coordinates to Cartesian coordinates
    float x = cos(latitude) * sin(longitude);
    float y = sin(latitude);
    float z = cos(latitude) * cos(longitude);

    vec3 dir = vec3(x, y, z);
    return (V * vec4(dir, 0)).xyz;
}

sample get_sample_pos_col(int index){

	sample s;
	vec2 uv = index2uv(index);
	ivec2 iuv = ivec2(uv);
	vec4 lookup0 = texelFetch(colTex, iuv);
	vec4 lookup3 = texelFetch(posTex, iuv);

	s.col = lookup0.rgb;
	s.pos = lookup3.xyz;
	return s;
}

sample get_sample_dir_col_for_env_jittered(int index, inout uint seed){

	sample s;
	s.uv = index2uv_for_env(index);
	ivec2 iuv = ivec2(s.uv);
	vec2 jitter_uv = s.uv;// + 2*vec2(RandomFloat01(seed)-0.5, RandomFloat01(seed)-0.5);
	s.col = texture(environmentMap, jitter_uv).rgb;
	s.nor = uv2dir(jitter_uv);
	s.pos = s.nor; //use the position variable to pass the direction for reprojection
	return s;
}

sample get_sample(int index){

	sample s;
	vec2 uv = index2uv(index);
	ivec2 iuv = ivec2(uv);
	vec4 lookup0 = texelFetch(colTex, iuv);
	vec4 lookup1 = texelFetch(norDepthTex, iuv);
	//vec4 lookup2 = texelFetch(depthLayersTex, iuv);
	vec4 lookup3 = texelFetch(posTex, iuv);
	vec4 lookup4 = texelFetch(albTex, iuv);
	s.col = lookup0.rgb;
	s.nor = lookup1.xyz;
	s.vel = vec2(lookup0.w, texelFetch(prev_best_wposTex, iuv).w);
	s.pos = lookup3.xyz;
	s.depth = lookup1.w;
	s.index = index;
	s.uv = uv;
	s.alb = lookup4.rgb;
	s.id = lookup4.w;
	return s;
}


vec3 get_radiance(in sample this_s, in sample test_s){

	vec3 diff = test_s.pos - this_s.pos;
	vec3 dir = normalize(diff);
	float lambert = max(0.0, dot(this_s.nor, dir));
	return this_s.alb * lambert * test_s.col;
											
}

vec3 get_radiance_for_env(in sample this_s, in sample test_s){

	float lambert = max(0.0, dot(this_s.nor, test_s.nor));
	return this_s.alb * lambert * test_s.col;							
}

vec4 updateReservoir(vec4 reservoir, float lightToSample, float weight, float c, inout uint seed)
{
	// Algorithm 2 of ReSTIR paper
	reservoir.x = reservoir.x + weight; // r.w_sum
	reservoir.z = reservoir.z + c; // r.M
	if (RandomFloat01(seed) < weight / reservoir.x) {
		reservoir.y = lightToSample; // r.y
	}

	return reservoir;
}

bool background(in sample this_s){
	return this_s.pos.x == 1.0 && this_s.pos.y == 1.0 && this_s.pos.z == 1.0;
}

bool get_exit_distance_from_frustum(in vec3 ro, in vec3 rd, in vec4 plane, out float t){

  // Calculate the denominator of the intersection formula
  float denom = dot(plane.xyz, rd);

  if (abs(denom) > 1e-6) {  // Avoid division by zero
    // Calculate the intersection parameter t
    t = -(dot(plane.xyz, ro) + plane.w) / denom;

    if (t >= 0.0) {  // Check if the intersection is in the direction of the ray
        return true;
    } else {
      return false;
    }
  } 

  return false;  // Ray is parallel to the plane
}

bool visible(in sample this_s, in sample test_s, inout uint seed){
	//return true;

	float num_iterations = length(test_s.uv - this_s.uv);
	num_iterations /= 6;
	float step = 1 / num_iterations;
	float start = step * (1 + RandomFloat01(seed) - 0.5);
	for(float i = start; i < 1; i += step){ //make a better tracing
		vec2 test_uv = mix(this_s.uv, test_s.uv, i);
		float expected_depth = (this_s.pos.z * test_s.pos.z) / mix(test_s.pos.z, this_s.pos.z, i);
		vec4 sampled_depth = texelFetch(depthLayersTex, ivec2(test_uv));
	    if ( 	(sampled_depth.r > expected_depth && expected_depth > sampled_depth.g) || 
	    		(sampled_depth.b > expected_depth && expected_depth > sampled_depth.a) ){
	    	return false;
	    }
	}
	return true;
}
/*
bool visible(in sample this_s, in sample test_s, inout uint seed){
	//return true;
	float num_iterations = 6;
	float step = 0.1;//1 / num_iterations;
	float start = step * (1 + RandomFloat01(seed) - 0.5);
	for(float i = start; i < 1; i += step){ //make a better tracing
		vec2 test_uv = mix(this_s.uv, test_s.uv, vec2(i*i));
		float expected_depth = (this_s.depth * test_s.depth) / mix(test_s.depth, this_s.depth, i*i);
		float sampled_depth = texelFetch(norDepthTex, ivec2(test_uv)).w;
		if(sampled_depth < (expected_depth - 0.01) ) return false;
	}
	return true;
}
*/
vec2 pos2uv(in vec3 p){

	vec4 projP = projmat * vec4(p, 1);
	projP.xy = (projP.xy/projP.w) * 0.5 + 0.5;
	return floor( ( textureMatrix0 * vec4(projP.xy,1,1) ).xy ) + 0.5;// * texDim;

}

bool visible_env(in sample this_s, in sample test_s, inout uint seed){

	//return true;

	float t = 999999;
	float test_t;
	t = get_exit_distance_from_frustum(this_s.pos, test_s.nor, jit_in.plane_near, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, test_s.nor, jit_in.plane_far, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, test_s.nor, jit_in.plane_left, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, test_s.nor, jit_in.plane_right, test_t) ? 	min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, test_s.nor, jit_in.plane_top, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, test_s.nor, jit_in.plane_bottom, test_t) ? 	min(t, test_t) : t;

	vec3 end_pos = this_s.pos + test_s.nor*t; 
	float end_depth = end_pos.z;//length(end_pos);
	vec2 end_uv = pos2uv(end_pos);

	float num_iterations = length(this_s.uv - end_uv);
	float step = 1 / num_iterations;
	float start = step*0.5;//0;//step * (RandomFloat01(seed) + 0.5);

	for(float i = start; i < 1; i += step){ //make a better tracing
		float e = i;//i*i;
		vec2 test_uv = mix(this_s.uv, end_uv, vec2(e));
		if(test_uv.x < 0 || test_uv.y < 0 || test_uv.x >= texDim.x || test_uv.y >= texDim.y) return true;
		float expected_depth = (this_s.pos.z * end_depth) / mix(end_depth, this_s.pos.z, e);
		vec4 sampled_depth = texelFetch(depthLayersTex, ivec2(test_uv));
	    if ( 	(sampled_depth.r > expected_depth && expected_depth > sampled_depth.g) || 
	    		(sampled_depth.b > expected_depth && expected_depth > sampled_depth.a) ){
	    	return false;
	    }
	}
	return true;

}
/*
bool visible_env(in sample this_s, in sample test_s, inout uint seed){

	//return true;

	float num_iterations = 6;
	float step = 0.01;//1 / num_iterations;
	float start = step * (RandomFloat01(seed) + 0.5);
	vec3 end_pos = this_s.pos + test_s.nor*6; 
	float end_depth = length(end_pos);
	vec2 end_uv = pos2uv(end_pos);
	for(float i = start; i < 1; i += step){ //make a better tracing
		vec2 test_uv = mix(this_s.uv, end_uv, vec2(i*i));
		if(test_uv.x < 0 || test_uv.y < 0 || test_uv.x >= texDim.x || test_uv.y >= texDim.y) return true;
		float expected_depth = mix(this_s.depth*farClip, end_depth, i*i);
		float sampled_depth = texture(norDepthTex, test_uv).w*farClip;
		if( expected_depth - sampled_depth > 0.01 ) return false;
	}
	return true;
}
*/
vec4 gather_samples(in sample this_s, inout uint seed, out float p_hat){

    vec4 reservoir = vec4(0); //curr reservoir

	int M = 8; //num of from the view port
	int J = 8; //num of samples from the environment map

	int sample_index;
	vec2 sample_uv;

	float radius = max(texDim.x, texDim.y);//*(1 - (this_s.depth/farClip));;//search_radius*(1 - (this_s.depth/farClip));
	//float pdf = 1/5;//3.1415;
	//float pdf_direct = 1 / (texDim.x * texDim.y);
	//float pdf_env = 1 / (mapSize.x * mapSize.y);
	//float N = texDim.x*texDim.y;//floor(radius*radius*3.1415);

	if(background(this_s)) return vec4(0.0);

	//initial selection of 1 sample of M
	for (int i = 0; i < M; i++)
	{
		bool found_valid_uv = false;
		sample_uv = get_sample_uv(seed);
	    sample_index = int(uv2index(sample_uv));
	    sample test_s = get_sample_pos_col(sample_index);
	    if(background(test_s)) continue;

		p_hat = luminance( get_radiance(this_s, test_s) );
		//p_hat /= max(0.0, dot(this_s.nor, normalize(test_s.pos - this_s.pos)))/M_PI;

	    reservoir = updateReservoir(reservoir, float(sample_index), p_hat, 1, seed);
	}


	//float pdf = 1 / (mapSize.x*mapSize.y);
	//sample the environment map
	for (int k = 0; k < J; k++)
	{
		sample_uv = get_sample_uv_for_env(seed, this_s.nor);

	    sample_index = int(uv2index_for_env(sample_uv));
	    sample test_s = get_sample_dir_col_for_env_jittered(sample_index, seed);

		p_hat = luminance( get_radiance_for_env(this_s, test_s) );
		//p_hat /= max(0.0, dot(this_s.nor, test_s.nor))/M_PI;
		//p_hat /= 4*M_PI;
	    reservoir = updateReservoir(reservoir, float(sample_index), p_hat, 1, seed);
	}

	if(reservoir.y >= 0){ //if it's a sample from the viewport

		sample test_s = get_sample(int(reservoir.y));
		p_hat = luminance( get_radiance(this_s, test_s) );
		if(!visible(this_s, test_s, seed)){
			p_hat = 0;
		}

	} else { //if it's a sample from the environment map

		sample test_s = get_sample_dir_col_for_env_jittered(int(reservoir.y), seed);
		p_hat = luminance( get_radiance_for_env(this_s, test_s) );
		if(!visible_env(this_s, test_s, seed)){
			p_hat = 0;
		}

	}

	reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
	return reservoir;
}

bool valid_reprojection(in sample this_s, in vec2 uv){

	if(!valid_uv(uv)) return false;
	//vec2 prev_vel = texture(depthLayersTex, uv).ba;
	//float vel_diff = luminance(this_s.vel - prev_vel);
	//float weight = clamp( (vel_diff - 0.001)*1000, 0.0, 1.0 );
	//if(weight > 0.1) return false;
	return true;
}


void main(void) {

	uint seed = get_rng_seed();
	sample this_s = get_sample(uv2index(jit_in.uv));
	if(this_s.depth == 1){
		outReservoir = vec4(0.0);
		outPhat = vec4(0.0);
		return;
	}

	sample test_s;

	float p_hat;
	vec4 reservoir = gather_samples(this_s, seed, p_hat);


	//TEMPORAL REUSE//____________________________________________________________

	ivec2 reprojected_uv = ivec2(this_s.uv - this_s.vel*texDim );
	//reprojected_uv = ivec2(this_s.uv);

	if(valid_reprojection(this_s, vec2(reprojected_uv))){

		vec4 prev_reservoir = texelFetch(prev_reservoirTex, reprojected_uv);
		vec4 temporal_reservoir = vec4(0);

		// combine current reservoir
		temporal_reservoir = updateReservoir(temporal_reservoir, reservoir.y, p_hat * reservoir.w * reservoir.z, reservoir.z, seed);
		
		// combine previous reservoir
		if(prev_reservoir.y >= 0){

			vec4 lookup_prev_pos_id = texelFetch(prev_best_wposTex, reprojected_uv);
			vec4 prev_best_wpos = projmat * vec4( (V * vec4(lookup_prev_pos_id.xyz, 1)).xyz, 1);
			prev_best_wpos.xy = (prev_best_wpos.xy/prev_best_wpos.w) * 0.5 + 0.5;
			vec2 prev_best_wpos_uv = floor((textureMatrix0 * vec4(prev_best_wpos.xy,1,1)).xy) + 0.5;// * texDim;

			if(valid_uv(prev_best_wpos_uv)){

				prev_reservoir.y = float(uv2index(prev_best_wpos_uv));
				test_s = get_sample(int(prev_reservoir.y));


				p_hat = luminance( get_radiance(this_s, test_s) );
				if(background(test_s)) p_hat = 0.0;

				//vec2 prev_vel = texture(depthLayersTex, vec2(reprojected_uv)).ba;
				//float vel_diff = length(this_s.vel - prev_vel);
				//float weight = clamp( 1 - (vel_diff - 0.001)*1000, 0.0, 1.0 );

				prev_reservoir.z =  min(20*reservoir.z, prev_reservoir.z);
				temporal_reservoir = updateReservoir(temporal_reservoir, prev_reservoir.y, p_hat * prev_reservoir.w * prev_reservoir.z, prev_reservoir.z, seed);
			}

		} else {

			vec2 prev_best_wpos_uv = texelFetch(prev_best_wposTex, reprojected_uv).xy;

			prev_reservoir.y = float(uv2index_for_env(prev_best_wpos_uv));
			test_s = get_sample_dir_col_for_env_jittered(int(prev_reservoir.y), seed);

			p_hat = luminance( get_radiance_for_env(this_s, test_s) );
			if(background(test_s)) p_hat = 0.0;

			//vec2 prev_vel = texture(depthLayersTex, vec2(reprojected_uv)).ba;
			//float vel_diff = length(this_s.vel - prev_vel);
			//float weight = clamp( 1 - (vel_diff - 0.001)*1000, 0.0, 1.0 );

			prev_reservoir.z = min(20*reservoir.z, prev_reservoir.z);
			temporal_reservoir = updateReservoir(temporal_reservoir, prev_reservoir.y, p_hat * prev_reservoir.w * prev_reservoir.z, prev_reservoir.z, seed);	

		}

		temporal_reservoir.z = reservoir.z + prev_reservoir.z;
		
		//if(temporal_reservoir.y >= 0){
		//	test_s = get_sample(int(temporal_reservoir.y));
		//	p_hat = length( get_radiance(this_s, test_s) );			
		//} else {
		//	test_s = get_sample_dir_col_for_env_jittered(int(temporal_reservoir.y), seed);
		//	p_hat = length( get_radiance_for_env(this_s, test_s) );
		//		
		//}
		//
		//temporal_reservoir.w = (1 / max(p_hat, 0.0001)) * (temporal_reservoir.x / max(temporal_reservoir.z, 0.0001));		
		reservoir = temporal_reservoir;	
		
	}

	//___________________________________________________________________________________________________________________________________________________________

	
	if(reservoir.y >= 0){ //if the sample is from the viewport

		test_s = get_sample(int(reservoir.y));

		if(!visible(this_s, test_s, seed)){
			reservoir.w = 0.0;
		} else {
			float p_hat = luminance(get_radiance(this_s, test_s));
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		}

	} else { //if the sample is from the environment map

		test_s = get_sample_dir_col_for_env_jittered(int(reservoir.y), seed);

		if(!visible_env(this_s, test_s, seed)){
			reservoir.w = 0.0;
		} else {
			p_hat = luminance( get_radiance_for_env(this_s, test_s) );
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		}
	}

	outReservoir = reservoir;
	outPhat = vec4(p_hat, 0,0,1);

	outTest = reservoir.y < 0 ? vec4(index2uv_for_env(int(reservoir.y))/mapSize,0,0) : vec4(0.0);


}
]]>
</program>
</language>
</jittershader>
