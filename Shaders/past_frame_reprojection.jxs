<jittershader name="default">
	<description>Default Slab </description>
	<param name="currImgTex" type="int" default="0" />
	<param name="prevImgTex" type="int" default="1" />
	<param name="velTex" type="int" default="2" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<language name="glsl" version="1.5">
		<bind param="currImgTex" program="fp" />
		<bind param="prevImgTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="texDim" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 uv;
			} jit_in;
			layout (location = 0) out vec4 outColor;
			
			uniform sampler2DRect currImgTex, prevImgTex, velTex;
			uniform vec2 texDim;
			void main(void) {

				vec2 vel = texelFetch(velTex, ivec2(jit_in.uv)).xy * texDim;
				vec2 coord = jit_in.uv - vel;

				outColor = (coord.x < 0 || coord.y < 0 || coord.x >= texDim.x || coord.y >= texDim.y) ?
							texelFetch(currImgTex, ivec2(jit_in.uv)) :
							texture(prevImgTex, coord);

			}
		]]>
		</program>
	</language>
</jittershader>
