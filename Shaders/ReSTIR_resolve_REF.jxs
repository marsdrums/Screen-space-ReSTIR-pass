<jittershader name="default">
	<description>Default Slab </description>
	<param name="dummyTex" type="int" default="0" />
	<param name="reservoirTex" type="int" default="1" filter="nearest" />
	<param name="colTex" type="int" default="2" filter="nearest" />
	<param name="norDepthTex" type="int" default="3" filter="nearest" />
	<param name="velTex" type="int" default="4" filter="nearest" />
	<param name="posTex" type="int" default="5" filter="nearest" />
	<param name="albTex" type="int" default="6" filter="nearest" />	
	<param name="environmentMap" type="int" default="7" />
	<param name="texDim" type="vec2" state="TEXDIM1" />
	<param name="mapSize" type="vec2" state="TEXDIM7" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="farClip" type="float" state="FAR_CLIP" />

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="V" type="mat4" state="VIEW_MATRIX" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" transform="INVERSE" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE1_MATRIX" />
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<param name="farCorner" type="vec3" state="FAR_CORNER" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<language name="glsl" version="1.5">
		<bind param="dummyTex" program="fp" />
		<bind param="reservoirTex" program="fp" />
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="mapSize" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="environmentMap" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="farClip" program="fp" />

		<bind param="MVP" program="vp" />
		<bind param="MVP" program="fp" />
		<bind param="MV" program="fp" />
		<bind param="invV" program="fp" />
		<bind param="V" program="fp" />
		<bind param="VP" program="fp" />
		<bind param="projmat" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="farCorner" program="vp" />
		<bind param="eye" program="fp" />

		<include source="noise_functions.glsl" program="fp" />
		<include source="ReSTIR_structures_resolve.glsl" program="fp" />
		<include source="ReSTIR_common_REF.glsl" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
	flat vec4 plane_near;
	flat vec4 plane_far;
	flat vec4 plane_left;
	flat vec4 plane_right;
	flat vec4 plane_top;
	flat vec4 plane_bottom;
} jit_out;

uniform mat4 MVP;
uniform mat4 textureMatrix0;
uniform vec3 farCorner;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.dir = farCorner * vec3(gl_Position.xy, 1);
	jit_out.uv = vec2(textureMatrix0*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));
}
]]>
</program>
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;


uint get_rng_seed(){
	return uint(jit_in.uv.x*371783) + uint(jit_in.uv.y*288472) + uint(frame*377112);
}

ivec2 get_random_uv(inout uint seed, float radius){
	float angle = RandomFloat01(seed)*TWOPI;
	float ra = RandomFloat01(seed)*radius + 1;
	return ivec2(cos(angle)*ra, sin(angle)*ra) + ivec2(jit_in.uv);
}


void main(void) {

	sample this_s = get_sample(uv2index(floor(jit_in.uv) + 0.5));
	if(this_s.depth == 1){
		outColor = vec4(0.0);
		return;
	}

	uint seed = get_rng_seed();

	float a = 1./(1. + this_s.nor.z);
    float b = -this_s.nor.x*this_s.nor.y*a;
    vec3 f = vec3(1. - this_s.nor.x*this_s.nor.x*a, b, -this_s.nor.x);
   	vec3 r = vec3(b, 1. - this_s.nor.y*this_s.nor.y*a , -this_s.nor.y);

   	mat3 TBN = mat3(r, f, this_s.nor);

	sample test_s;

	//float pdf = 1 / 100.;

	vec4 reservoir = texelFetch(reservoirTex, ivec2(jit_in.uv));

	outColor = vec4(0,0,0,1);

	float radius = mix(300, 300, this_s.depth)*roughness*roughness;
	int NUM_SAMPLES = int(mix(4, 4, this_s.depth));
	float weight = 1;
	ivec2 uv_offset[8] = ivec2[](	ivec2(-1,-1), 
									ivec2(0, -1), 
									ivec2(1, -1), 
									ivec2(-1,0),
									ivec2(1,0),
									ivec2(-1,1),
									ivec2(0,1),
									ivec2(1,1));

	for(int i = NUM_SAMPLES; i >= 0; i--){
		bool valid_uv = false;
		ivec2 randUV;
		for(int i = 0; i < 1; i++){ //search for valid uvs (not outside the viewport);

			float rand_radius = sqrt(RandomFloat01(seed));
   			float rand_angle = RandomFloat01(seed)*TWOPI;
   			vec3 disk = vec3(cos(rand_angle), sin(rand_angle), 0)*rand_radius*radius;///(-this_s.pos.z);
   			//disk = TBN * disk;
   			//disk += this_s.pos;
   			//vec4 proj_disk = projmat * vec4(disk, 1);
   			//proj_disk.xy /= proj_disk.w;
   			//vec2 proj_disk_uv = vec2(textureMatrix0 * vec4((proj_disk.xy*0.5 +0.5), 1,1));
			//randUV = ivec2(proj_disk_uv);//get_random_uv(seed, radius);
			//randUV = get_random_uv(seed, radius);
			randUV = ivec2(jit_in.uv + disk.xy);

			bool background = texelFetch(norDepthTex, randUV).w == 1;
			if(randUV.x >= 0 && randUV.y >= 0 && randUV.x < texDim.x && randUV.y < texDim.y && !background){
				valid_uv = true;
				break;
			}
		}

		if(!valid_uv) continue;
		
		vec4 reservoir = texelFetch(reservoirTex, randUV);
		float angle_diff = dot(this_s.nor, texelFetch(norDepthTex, randUV).xyz);
		float sample_depth = texelFetch(norDepthTex, randUV).w;
		if(angle_diff < 0) continue;

		if(reservoir.y >= 0){ //if the sample is from the viewport

			test_s = get_sample_pos_col(int(reservoir.y));

			if(visible(this_s, test_s, seed)){
				float this_weight = angle_diff * ( 1 - saturate(200*abs(this_s.depth - sample_depth)) );
				vec3 radiance = get_specular_radiance(this_s, test_s) * this_weight;// * max(0.5, dot(test_s.nor, this_s.nor));
				float p_hat = luminance(radiance);
				p_hat /= get_pdf(this_s, test_s);
				//if(p_hat <= 0)continue;
				reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
				radiance *= reservoir.w;
				outColor.rgb += radiance;
				weight += this_weight;
			}		

		} else {

			test_s = get_sample_dir_col_for_env_jittered(int(reservoir.y), seed);

			//bool is_visible = (i % 3) == 0 ? visible_env(this_s, test_s, seed) : true;
			bool is_visible = visible_env(this_s, test_s, seed);
			if(is_visible){
				float this_weight = angle_diff * ( 1 - saturate(200*abs(this_s.depth - sample_depth)) );
				vec3 radiance = get_radiance_for_env(this_s, test_s) * this_weight;// * max(0.5, dot(test_s.nor, this_s.nor));
				float p_hat = luminance(radiance);
				//if(p_hat <= 0)continue;
				reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
				radiance *= reservoir.w;
				outColor.rgb += radiance;
				weight += this_weight;
			}
		}
	}

	outColor.rgb /= weight;

}
]]>
</program>
</language>
</jittershader>
