<jittershader name="default">
	<description>Default Slab </description>
	<param name="colTex" type="int" default="0" />
	<param name="norDepthTex" type="int" default="1" />
	<param name="velTex" type="int" default="2" />
	<param name="posTex" type="int" default="3" />
	<param name="prev_reservoirTex" type="int" default="4" />
	<param name="prev_best_wposTex" type="int" default="5" />
	<param name="albTex" type="int" default="6" />
	<param name="environmentMap" type="int" default="7" />
	<param name="roughMetalTex" type="int" default="8" />
	<param name="depthsTex" type="int" default="9" />
	<param name="noiseTex" type="int" default="10" />
	<texture file="stbn_uvec2_null_scalar_tiled.png" type="float16" unit="10" rectangle="1" filter="nearest nearest" wrap="repeat repeat"/>

	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="mapSize" type="vec2" state="TEXDIM7" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="farClip" type="float" state="FAR_CLIP" />

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="V" type="mat4" state="VIEW_MATRIX" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" transform="INVERSE" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<param name="farCorner" type="vec3" state="FAR_CORNER" />
	<param name="nearClip" type="float" state="NEAR_CLIP" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<language name="glsl" version="1.5">
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="mapSize" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="prev_reservoirTex" program="fp" />
		<bind param="prev_best_wposTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="environmentMap" program="fp" />
		<bind param="roughMetalTex" program="fp" />
		<bind param="depthsTex" program="fp" />
		<bind param="noiseTex" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="farClip" program="fp" />
		<bind param="farClip" program="vp" />

		<bind param="MVP" program="vp" />
		<bind param="MVP" program="fp" />
		<bind param="MV" program="fp" />
		<bind param="invV" program="fp" />
		<bind param="V" program="fp" />
		<bind param="VP" program="fp" />
		<bind param="projmat" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="farCorner" program="vp" />
		<bind param="nearClip" program="vp" />
		<bind param="eye" program="fp" />

		<include source="noise_functions.glsl" program="fp" />
		<include source="ReSTIR_structures_temporal.glsl" program="fp" />
		<include source="ReSTIR_common_REF.glsl" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
	flat vec4 plane_near;
	flat vec4 plane_far;
	flat vec4 plane_left;
	flat vec4 plane_right;
	flat vec4 plane_top;
	flat vec4 plane_bottom;
} jit_out;

uniform mat4 MVP;
uniform mat4 textureMatrix0;
uniform vec3 farCorner;
uniform float nearClip, farClip;

vec4 computePlane(vec3 p1, vec3 p2, vec3 p3) {
    vec3 normal = normalize(cross(p2 - p1, p3 - p1));
    float D = -dot(normal, p1);
    return vec4(normal, D);
}

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.dir = farCorner * vec3(gl_Position.xy, 1);
	jit_out.uv = vec2(textureMatrix0*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));

   // Compute frustum dimensions
    float far_height 	= 2.0 * abs(farCorner.y);
    float far_width 	= 2.0 * abs(farCorner.x);

    float near_height 	= (nearClip / farClip) * far_height;
    float near_width 	= (nearClip / farClip) * far_width;

    // Compute frustum corners in view space
    vec3 near_center 	= vec3(0.0, 0.0, -nearClip);
    vec3 far_center 	= vec3(0.0, 0.0, -farClip);

    vec3 far_top_right 		= farCorner;
    vec3 far_top_left 		= vec3(-farCorner.x, farCorner.y, farCorner.z);
    vec3 far_bottom_right 	= vec3(farCorner.x, -farCorner.y, farCorner.z);
    vec3 far_bottom_left 	= vec3(-farCorner.x, -farCorner.y, farCorner.z);

    vec3 near_top_right 	= vec3(near_width / 2.0, near_height / 2.0, -nearClip);
    vec3 near_top_left 		= vec3(-near_width / 2.0, near_height / 2.0, -nearClip);
    vec3 near_bottom_right 	= vec3(near_width / 2.0, -near_height / 2.0, -nearClip);
    vec3 near_bottom_left 	= vec3(-near_width / 2.0, -near_height / 2.0, -nearClip);

    // Define frustum planes
    jit_out.plane_near 		= computePlane(near_top_left, near_top_right, near_bottom_right); // Near plane
    jit_out.plane_far 		= computePlane(far_top_right, far_top_left, far_bottom_left); // Far plane
    jit_out.plane_left 		= computePlane(near_top_left, far_top_left, far_bottom_left); // Left plane
    jit_out.plane_right 	= computePlane(far_top_right, near_top_right, near_bottom_right); // Right plane
    jit_out.plane_top 		= computePlane(near_top_left, near_top_right, far_top_right); // Top plane
    jit_out.plane_bottom 	= computePlane(near_bottom_right, near_bottom_left, far_bottom_left); // Bottom plane

}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outReservoir;
layout (location = 1) out vec4 outPhat;
layout (location = 2) out vec4 outTest;


uint get_rng_seed(){
	return uint(jit_in.uv.x*371783) + uint(jit_in.uv.y*288472) + uint(frame*377112);
}

sample get_sample(int index){

	sample s;
	vec2 uv = index2uv(index);
	ivec2 iuv = ivec2(uv);
	vec4 lookup0 = texelFetch(colTex, iuv);
	vec4 lookup1 = texelFetch(norDepthTex, iuv);
	vec4 lookup2 = texelFetch(velTex, iuv);
	vec4 lookup3 = texelFetch(posTex, iuv);
	vec4 lookup4 = texelFetch(albTex, iuv);
	vec2 lookup5 = texelFetch(roughMetalTex, iuv).xy;
	s.col = lookup0.rgb;
	s.nor = lookup1.xyz;
	s.vel = lookup2.xy;
	s.pos = lookup3.xyz;
	s.depth = lookup1.w;
	s.index = index;
	s.uv = uv;
	s.alb = lookup4.rgb;
	s.id = lookup4.w;
	s.view = normalize(s.pos);
	s.ref = reflect(s.view, s.nor);
	s.rou = lookup5.x;//clamp(lookup5.x, 0.0, 0.3);
	s.met = lookup5.y;
	return s;
}


bool get_exit_distance_from_frustum(in vec3 ro, in vec3 rd, in vec4 plane, out float t){

  // Calculate the denominator of the intersection formula
  float denom = dot(plane.xyz, rd);

  if (abs(denom) > 1e-6) {  // Avoid division by zero
    // Calculate the intersection parameter t
    t = -(dot(plane.xyz, ro) + plane.w) / denom;

    if (t >= 0.0) {  // Check if the intersection is in the direction of the ray
        return true;
    } else {
      return false;
    }
  } 

  return false;  // Ray is parallel to the plane
}

vec4 get_sample_uv_or_dir(in sample this_s, inout uint seed){

	//if(max(0.0, (this_s.rou-0.5)*2) > RandomFloat01(seed)){
	//	vec2 rand_coordinates = vec2(RandomFloat01(seed), RandomFloat01(seed));
	//	return RandomFloat01(seed) > 0.5 ? rand_coordinates*texDim : -rand_coordinates*mapSize;
	//}

  	float resolution  = 1;//mix(0.1, 2., RandomFloat01(seed));// 0.1;
  	int   steps       = 4;

 	vec4 startView = vec4(this_s.pos, 1);

 	bool valid = false;
 	vec3 pivot;

 	const vec3 dither[8] = vec3[]	(		vec3(-1,-1,-1), 
 																		vec3(+1,-1,-1), 
 																		vec3(-1,+1,-1), 
 																		vec3(+1,+1,-1), 
 																		vec3(-1,-1,+1), 
 																		vec3(+1,-1,+1),
 																		vec3(-1,+1,+1), 
 																		vec3(+1,+1,+1));

 	float tile = mod(float(frame), 64);
 	vec2 warped_tile = vec2(mod(tile, 8), floor(tile / 8))*128;

	int dither_index = int( mod(float(frame)+floor(texelFetch(noiseTex, ivec2(mod(jit_in.uv*2, 128) + warped_tile)).w*8), 8) );

 	for(int k = 0; k < 10; k++){
 			vec3 test_dir = abs(randomUnitVector3(seed))*dither[dither_index];
			pivot = normalize(this_s.ref + test_dir*this_s.rou*this_s.rou); //***pick a better sample distribution!!!
			if( dot(pivot, this_s.nor) > 0 ){
				valid = true;
				break;
			}
 	}
 	
 	if(!valid) return vec4(0.0);

	if(pivot.z > 0.999){
	  //convert ray direction from view to world space
	  //pivot = (invV * vec4(pivot, 0)).xyz;
	  return vec4(pivot, -1);
	  //to texture space
	  //vec2 frag = vec2(atan(pivot.z, pivot.x), asin(pivot.y));
	  //frag *= vec2(-1/(2*M_PI), 1/M_PI); //to invert atan
	  //frag += 0.5;
	  //frag *= mapSize;
	  //return -frag; //i use negative uv coordinates to instruct the following functions to take a sample from the env map
	}

	float t = 999999;
	float test_t;
	t = get_exit_distance_from_frustum(this_s.pos, pivot, jit_in.plane_near, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, pivot, jit_in.plane_far, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, pivot, jit_in.plane_left, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, pivot, jit_in.plane_right, test_t) ? 	min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, pivot, jit_in.plane_top, test_t) ? 		min(t, test_t) : t;
	t = get_exit_distance_from_frustum(this_s.pos, pivot, jit_in.plane_bottom, test_t) ? 	min(t, test_t) : t;

	vec4 depths;// = startView;
	vec4 endView;
	vec4 startFrag;
	vec4 endFrag;

  endView   = vec4(startView.xyz + pivot*t, 1);

  startFrag    = startView;
  startFrag.xy = this_s.uv;

  endFrag      = endView;
  endFrag      = projmat * endFrag;
  endFrag.xy 	/= endFrag.w;
  endFrag.xy   = endFrag.xy * 0.5 + 0.5;
  endFrag.xy  *= texDim;

  vec2 frag  = startFrag.xy;
   //vec4   uv;
   //uv.xy = frag/texDim;

  float deltaX    = endFrag.x - startFrag.x;
  float deltaY    = endFrag.y - startFrag.y;
  float useX      = abs(deltaX) >= abs(deltaY) ? 1.0 : 0.0;
  float delta     = mix(abs(deltaY), abs(deltaX), useX) * clamp(resolution, 0.0, 1.0);
  vec2  increment = vec2(deltaX, deltaY) / max(delta, 0.001);
  frag += increment;// * (RandomFloat01(seed)*0.5) + increment*0.0001;

  float search0 = 0;
  float search1 = 0;

  int hit0 = 0;
  int hit1 = 0;

  float viewDistance = startView.z;

  float i = 0;

  bool found = false;

  for (i = 0; i < int(delta); i+=1) {
    
    	if(i >= int(delta)-1){
    		//if the ray didn't hit any geometry, sample from the envionment map
	
    		//convert ray direction from view to world space
    		return  vec4(pivot, -1);
	
    		//to texture space
    		//frag = vec2(atan(pivot.z, pivot.x), asin(pivot.y));
    		//frag *= vec2(-0.1591549431, 0.3183098862);//vec2(-1/(2*M_PI), 1/M_PI); //to invert atan
    		//frag += 0.5;
    		//frag *= mapSize;
    		//return -frag; //i use negative uv coordinates to instruct the following functions to take a sample from the env map
    	}
    //uv.xy      = frag / texDim;

    depths = texture(depthsTex, frag);

    search1 = mix( (frag.y - startFrag.y) / deltaY, (frag.x - startFrag.x) / deltaX, useX );
    search1 = clamp(search1, 0.0, 1.0);

    viewDistance = (startView.z * endView.z) / mix(endView.z, startView.z, search1);
    //depth        = positionTo.r - viewDistance;

    if ( 	(depths.r >= viewDistance && viewDistance >= depths.g ) || 
    			(depths.b >= viewDistance && viewDistance >= depths.a ) ){
    //if(depth > 0 && depth < thickness){
      hit0 = 1;
      found = true;
      break;
    } else {
      search0 = search1;
    }
    frag      += increment;
  }

  search1 = search0 + ((search1 - search0) / 2.0);// + (RandomFloat01(seed) - 0.5)*0.5;

  steps *= hit0;

  for (i = 0; i < steps; ++i) {
    frag       = mix(startFrag.xy, endFrag.xy, search1);

    //uv.xy      = frag / texDim;
    depths = texelFetch(depthsTex, ivec2(frag));

    viewDistance = (startView.z * endView.z) / mix(endView.z, startView.z, search1);
    //depth        = positionTo.r - viewDistance;

    if ( 	(depths.r > viewDistance && viewDistance > depths.g) || 
    			(depths.b > viewDistance && viewDistance > depths.a) ){
    //if(depth > 0 && depth < thickness){
      hit1 = 1;
      search1 = search0 + ((search1 - search0) / 2.0);
    } else {
      float temp = search1;
      search1 = search0 + ((search1 - search0) / 2.0);
      search0 = temp;
    }
  }

  return vec4(frag,0,1);

}


vec4 gather_samples(in sample this_s, inout uint seed, out float p_hat, out vec3 best_dir){

    vec4 reservoir = vec4(0); //curr reservoir

	int M = 1;//int(4*this_s.rou + 1); //num of from the view port

	int sample_index;
	vec3 candidate_dir;

	vec4 sample_uv_or_dir;

	if(background(this_s)) return vec4(0.0);

	//initial selection of 1 sample of M
	for (int i = 0; i < M; i++)
	{
		sample_uv_or_dir = get_sample_uv_or_dir(this_s, seed);

		if(sample_uv_or_dir.x == 0) continue; //the random ray generator failed

		if(sample_uv_or_dir.w > 0){ //if the sample is from the viewport

		    sample_index = int(uv2index(sample_uv_or_dir.xy));
		    sample test_s = get_sample_pos_col(sample_index);
			p_hat = length( get_specular_radiance(this_s, test_s) );
			//p_hat *= get_pdf(this_s, test_s);
			reservoir = updateReservoir(reservoir, float(sample_index), p_hat, 1, seed, candidate_dir, best_dir);	

		} else { //if the sample comes from the environment
			
			candidate_dir = sample_uv_or_dir.xyz;
	    	sample test_s = get_environment_sample(candidate_dir, seed, this_s.rou);
			p_hat = length( get_radiance_for_env(this_s, test_s) );	
			reservoir = updateReservoir(reservoir, -1, p_hat, 1, seed, candidate_dir, best_dir);	
		}
		
	}

	if(reservoir.y >= 0){ //if it's a sample from the viewport

		sample test_s = get_sample(int(reservoir.y));
		p_hat = length( get_specular_radiance(this_s, test_s) );
		//p_hat *= get_pdf(this_s, test_s);

	} else { //if it's a sample from the environment map

		sample test_s = get_environment_sample(best_dir, seed, this_s.rou);
		p_hat = length( get_radiance_for_env(this_s, test_s) );
	}

	reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
	return reservoir;
}

bool valid_reprojection(in sample this_s, in vec2 uv){

	//simplify this!!
	if(!valid_uv(uv)) return false;
	return true;
}


void main(void) {

	uint seed = get_rng_seed();
	sample this_s = get_sample(uv2index(jit_in.uv));
	if(this_s.depth == 1){
		outReservoir = vec4(0.0);
		outPhat = vec4(0.0);
		return;
	}

	sample test_s;

	float p_hat;
	vec3 best_dir;
	vec4 reservoir = gather_samples(this_s, seed, p_hat, best_dir);

/*
	//TEMPORAL REUSE//____________________________________________________________

	ivec2 reprojected_uv = ivec2(this_s.uv - this_s.vel*texDim );

	if(valid_reprojection(this_s, vec2(reprojected_uv))/){

		vec4 prev_reservoir = texelFetch(prev_reservoirTex, reprojected_uv);
		//prev_reservoir.w *= 0.2;
		vec4 temporal_reservoir = vec4(0);

		// combine current reservoir
		temporal_reservoir = updateReservoir(temporal_reservoir, reservoir.y, p_hat * reservoir.w * reservoir.z, reservoir.z, seed, best_dir, best_dir);
		
		// combine previous reservoir
		if(prev_reservoir.y >= 0){

			vec4 lookup_prev_pos_id = texelFetch(prev_best_wposTex, reprojected_uv);
			vec4 prev_best_wpos = projmat * vec4( (V * vec4(lookup_prev_pos_id.yzw, 1)).xyz, 1);
			prev_best_wpos.xy /= prev_best_wpos.w;
			prev_best_wpos.xy = prev_best_wpos.xy * 0.5 + 0.5;
			vec2 prev_best_wpos_uv = floor((textureMatrix0 * vec4(prev_best_wpos.xy,1,1)).xy) + 0.5;// * texDim;

			if(valid_uv(prev_best_wpos_uv)){

				prev_reservoir.y = float(uv2index(prev_best_wpos_uv));
				test_s = get_sample(int(prev_reservoir.y));
				p_hat = 0;
				
				if(!background(test_s)){
					vec3 dummy_dir;
					p_hat = length( get_specular_radiance(this_s, test_s) );
					//p_hat *= get_pdf(this_s, test_s);

					//vec2 prev_vel = texture(velTex, vec2(reprojected_uv)).ba;
					//float vel_diff = length(this_s.vel - prev_vel);
					//float weight = clamp( 1 - (vel_diff - 0.001)*1000, 0.0, 1.0 );

					prev_reservoir.z =  min(4, prev_reservoir.z);
					temporal_reservoir = updateReservoir(temporal_reservoir, prev_reservoir.y, p_hat * prev_reservoir.w * prev_reservoir.z, prev_reservoir.z, seed, dummy_dir, dummy_dir);

				}
			}

		} else {

			vec3 prev_best_dir = texelFetch(prev_best_wposTex, reprojected_uv).yzw;

			test_s = get_environment_sample(prev_best_dir, seed, this_s.rou);

			p_hat = length( get_radiance_for_env(this_s, test_s) );
			//p_hat *= get_pdf(this_s, test_s);

			//vec2 prev_vel = texture(velTex, vec2(reprojected_uv)).ba;
			//float vel_diff = length(this_s.vel - prev_vel);
			//float weight = clamp( 1 - (vel_diff - 0.001)*1000, 0.0, 1.0 );

			prev_reservoir.z = min(4, prev_reservoir.z);
			temporal_reservoir = updateReservoir(temporal_reservoir, prev_reservoir.y, p_hat * prev_reservoir.w * prev_reservoir.z, prev_reservoir.z, seed, prev_best_dir, best_dir);	

		}

		temporal_reservoir.z = reservoir.z + prev_reservoir.z;
		
		if(temporal_reservoir.y >= 0){
			test_s = get_sample(int(temporal_reservoir.y));
			p_hat = length( get_specular_radiance(this_s, test_s) );			
		} else {
			test_s = get_environment_sample(best_dir, seed, this_s.rou);
			p_hat = length( get_radiance_for_env(this_s, test_s) );
				
		}
		
		temporal_reservoir.w = (1 / max(p_hat, 0.0001)) * (temporal_reservoir.x / max(temporal_reservoir.z, 0.0001));		
		reservoir = temporal_reservoir;	
		
	}

	//___________________________________________________________________________________________________________________________________________________________
*/

	if(reservoir.y >= 0){ //if the sample is from the viewport

		test_s = get_sample(int(reservoir.y));
		outTest = vec4(test_s.col, 1.0);

		if(false /*!visible(this_s, test_s, seed) */){
			reservoir.w = 0.0;
		} else {
			float p_hat = length(get_specular_radiance(this_s, test_s));
			//p_hat *= get_pdf(this_s, test_s);
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		}

		outPhat = vec4( p_hat, (invV * vec4(test_s.pos, 1)).xyz);

	} else { //if the sample is from the environment map

		test_s = get_environment_sample(best_dir, seed, this_s.rou);
		outTest = vec4(test_s.col, 1.0);

		if(false /*!visible_env(this_s, test_s, seed) */){
			reservoir.w = 0.0;
		} else {
			p_hat = length( get_radiance_for_env(this_s, test_s) );
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		}

		outPhat = vec4(p_hat, best_dir);
	}

	outReservoir = reservoir;
	
}
]]>
</program>
</language>
</jittershader>
